//
// File generated by HDevelop for HALCON/.NET (C#) Version 13.0.1.1
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;


public class HalconEventArgs : EventArgs
{

    private float pXvalue;
    public float PXvalue
    {
        get { return pXvalue; }
        set { pXvalue = value; }
    }

    private float xOs;
    public float XOs
    {
        get { return xOs; }
        set { xOs = value; }
    }

    private float yOs;
    public float YOs
    {
        get { return yOs; }
        set { yOs = value; }
    }
}

public partial class HDevelopExport
{
    public delegate void UpdateHandler(HDevelopExport sender, HalconEventArgs e);
    public event UpdateHandler UpdateResult;
    HalconEventArgs argumenti = new HalconEventArgs();

    public HTuple hv_ExpDefaultWinHandle;
    public HTuple hv_output = new HTuple();
    public float hv_fOutput = 0.0f;
    static public object HalconLock = new object();

#region LIVE IMAGE PROCESSING 
    private void action1()
    {


    // Local iconic variables 

    HObject ho_Image=null, ho_Regions=null, ho_Connection=null;
    HObject ho_SelectedRegions1=null, ho_Contours=null, ho_SmoothedContours=null;
    HObject ho_CrossMax=null, ho_CrossMin=null;

    // Local control variables 

    HTuple hv_AcqHandle = new HTuple(), hv_Width = new HTuple();
    HTuple hv_Height = new HTuple(), hv_SelectNumber = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Col = new HTuple(), hv_TupleMax = new HTuple();
    HTuple hv_IndexMax = new HTuple(), hv_HalfH = new HTuple();
    HTuple hv_HalfW = new HTuple(), hv_ColumMax = new HTuple();
    HTuple hv_rowToMax0 = new HTuple(), hv_colToMax0 = new HTuple();
        //HTuple hv_output = new HTuple()
    HTuple hv_outputmm = new HTuple();
    HTuple hv_MessageMax = new HTuple(), hv_MessagePos = new HTuple();
    HTuple hv_Messagemm = new HTuple(), hv_TupleMin = new HTuple();
    HTuple hv_IndexMin = new HTuple(), hv_ColumMin = new HTuple();
    HTuple hv_rowToMin0 = new HTuple(), hv_colToMin0 = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_MessageError = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_Connection);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_SmoothedContours);
    HOperatorSet.GenEmptyObj(out ho_CrossMax);
    HOperatorSet.GenEmptyObj(out ho_CrossMin);
        try
        {
          //************************************************************
          //LIVE APP
          //************************************************************

          while ((int)(1) != 0)
          {
            HOperatorSet.OpenFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default", 
                -1, "default", -1, "false", "default", "GC3851M_CAM_4", 0, -1, out hv_AcqHandle);
            // HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureTime", 2000.0);
            HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureTime", 3500.0);
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            ho_Image.Dispose();
            HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);

            try
            {
              //Find the edge conture
              //dev_display (Image)
              HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
              ho_Regions.Dispose();
              // HOperatorSet.Threshold(ho_Image, out ho_Regions, 0, 30); "ExposureTime", 2000.0
              HOperatorSet.Threshold(ho_Image, out ho_Regions, 0, 35);
              ho_Connection.Dispose();
              HOperatorSet.Connection(ho_Regions, out ho_Connection);
              ho_SelectedRegions1.Dispose();
              //HOperatorSet.SelectShape(ho_Connection, out ho_SelectedRegions1, "area", 
              //"and", 9908.54, 1e+006); "ExposureTime", 2000.0
              HOperatorSet.SelectShape(ho_Connection, out ho_SelectedRegions1, "area", 
                  "and", 380000, 1.30000e+006); 
              HOperatorSet.CountObj(ho_SelectedRegions1, out hv_SelectNumber);
              ho_Contours.Dispose();
              HOperatorSet.GenContourRegionXld(ho_SelectedRegions1, out ho_Contours, 
                  "border");

              //Smoth edge conture
              //smooth_contours_xld (Contours, SmoothedContours, 109)
              ho_SmoothedContours.Dispose();
              HOperatorSet.SmoothContoursXld(ho_Contours, out ho_SmoothedContours, 29);
              HOperatorSet.GetContourXld(ho_SmoothedContours, out hv_Row, out hv_Col);

              //* Define max value from tuple
              HOperatorSet.TupleMax(hv_Row, out hv_TupleMax);
              HOperatorSet.TupleFindFirst(hv_Row, hv_TupleMax, out hv_IndexMax);

              //Define constants:
              hv_HalfH = hv_Height/2;
              hv_HalfW = hv_Width/2;

              hv_ColumMax = hv_Col.TupleSelect(hv_IndexMax);
		  
		      lock (HDevelopExport.HalconLock)
                    {	
                      HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                      if ((int)(new HTuple((new HTuple(750)).TupleLess(hv_ColumMax))) != 0)
                      {
                        if ((int)(new HTuple(hv_ColumMax.TupleLess(hv_Width-750))) != 0)
                        {

                          ho_CrossMax.Dispose();
                          HOperatorSet.GenCrossContourXld(out ho_CrossMax, hv_Row.TupleSelect(
                              hv_IndexMax), hv_Col.TupleSelect(hv_IndexMax), 150, 0.785398);
                          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                          HOperatorSet.DispObj(ho_CrossMax, hv_ExpDefaultWinHandle);
                          hv_rowToMax0 = hv_Row.TupleSelect(hv_IndexMax);
                          hv_colToMax0 = hv_Col.TupleSelect(hv_IndexMax);
                          hv_output = 1382-(hv_Row.TupleSelect(hv_IndexMax));
                          hv_outputmm = (1382-(hv_Row.TupleSelect(hv_IndexMax)))*0.001;
                          hv_MessageMax = "Distance from center: "+hv_output;
                          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_MessageMax, "window", 
                              10, 10, "black", new HTuple(), new HTuple());
                          hv_MessagePos = (("Position: Row = "+hv_rowToMax0)+" Col = ")+hv_colToMax0;
                          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_MessagePos, "window", 
                              40, 10, "black", new HTuple(), new HTuple());
                          hv_Messagemm = "Distance from center [mm] = "+hv_outputmm;
                          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Messagemm, "window", 
                              70, 10, "black", new HTuple(), new HTuple());
                        }

                      }

                      //* Define min value from tuple
                      HOperatorSet.TupleMin(hv_Row, out hv_TupleMin);
                      HOperatorSet.TupleFindFirst(hv_Row, hv_TupleMin, out hv_IndexMin);
                      hv_ColumMin = hv_Col.TupleSelect(hv_IndexMin);


                      if ((int)(new HTuple((new HTuple(750)).TupleLess(hv_ColumMin))) != 0)
                      {
                        if ((int)(new HTuple(hv_ColumMin.TupleLess(hv_Width-750))) != 0)
                        {

                          ho_CrossMin.Dispose();
                          HOperatorSet.GenCrossContourXld(out ho_CrossMin, hv_Row.TupleSelect(
                              hv_IndexMin), hv_Col.TupleSelect(hv_IndexMin), 150, 0.785398);
                          HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                          HOperatorSet.DispObj(ho_CrossMin, hv_ExpDefaultWinHandle);
                          hv_rowToMin0 = hv_Row.TupleSelect(hv_IndexMin);
                          hv_colToMin0 = hv_Col.TupleSelect(hv_IndexMin);
                          hv_output = 1382-(hv_Row.TupleSelect(hv_IndexMin));
                          hv_outputmm = (1382-(hv_Row.TupleSelect(hv_IndexMin)))*0.001;
                          hv_MessageMax = "Distance from center: "+hv_output;
                          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_MessageMax, "window", 
                              10, 10, "black", new HTuple(), new HTuple());
                          hv_MessagePos = (("Position: Row = "+hv_rowToMin0)+" Col = ")+hv_colToMin0;
                          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_MessagePos, "window", 
                              40, 10, "black", new HTuple(), new HTuple());
                          hv_Messagemm = "Distance from center [mm] = "+hv_outputmm;
                          HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Messagemm, "window", 
                              70, 10, "black", new HTuple(), new HTuple());

                        }

                      }
				
				    }
                  
				    //Draw middle lines
                    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "blue");
                    HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_HalfH, 0, hv_HalfH, hv_Width);
                    HOperatorSet.DispLine(hv_ExpDefaultWinHandle, 0, hv_HalfW, hv_Height, hv_HalfW);

                    //Draw meassurement limit lines
                    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                    HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_HalfH + 691, 0, hv_HalfH + 691, hv_Width);
                    HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_HalfH - 691, 0, hv_HalfH - 691, hv_Width);


                    }

            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
              HDevExpDefaultException1.ToHTuple(out hv_Exception);
              hv_MessageError = new HTuple(" ERROR: Not able to analize photo, move horizontal axis");
              HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_MessageError, "window", 
                  10, 10, "black", new HTuple(), new HTuple());
            }

            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
               
                }

        }
        catch (HalconException HDevExpDefaultException)
        {
          ho_Image.Dispose();
          ho_Regions.Dispose();
          ho_Connection.Dispose();
          ho_SelectedRegions1.Dispose();
          ho_Contours.Dispose();
          ho_SmoothedContours.Dispose();
          ho_CrossMax.Dispose();
          ho_CrossMin.Dispose();

          throw HDevExpDefaultException;
        }
        ho_Image.Dispose();
        ho_Regions.Dispose();
        ho_Connection.Dispose();
        ho_SelectedRegions1.Dispose();
        ho_Contours.Dispose();
        ho_SmoothedContours.Dispose();
        ho_CrossMax.Dispose();
        ho_CrossMin.Dispose();

    }
#endregion

#region ONE SHOT IMAGE PROCESSING S1
    private void action2()
    {
        // Local iconic variables 

        HObject ho_Image, ho_ROI_0 = null, ho_ImageReduced = null;
        HObject ho_Regions = null, ho_RegionFillUp1 = null, ho_Connection = null;
        HObject ho_SelectedRegions1 = null, ho_Contours = null, ho_SmoothedContours = null;

        // Local control variables 

        HTuple hv_AcqHandle = null, hv_Width = new HTuple();
        HTuple hv_Height = new HTuple(), hv_SelectNumber = new HTuple();
        HTuple hv_Row = new HTuple(), hv_Col = new HTuple(), hv_HalfH = new HTuple();
        HTuple hv_HalfW = new HTuple(), hv_TupleMax = new HTuple();
        HTuple hv_IndexMax = new HTuple(), hv_ColumMax = new HTuple();
        HTuple hv_rowToMax0 = new HTuple(), hv_colToMax0 = new HTuple();
        //HTuple hv_output = new HTuple(), 
        HTuple hv_outputmm = new HTuple();
        HTuple hv_Exception = null, hv_MessageError = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);
        HOperatorSet.GenEmptyObj(out ho_ROI_0);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_RegionFillUp1);
        HOperatorSet.GenEmptyObj(out ho_Connection);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_Contours);
        HOperatorSet.GenEmptyObj(out ho_SmoothedContours);
        try
        {
            //************************************************************
            //ONE SHOT APP
            //************************************************************

            //Image Acquisition:


            HOperatorSet.OpenFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default", -1,
                "default", -1, "false", "default", "GC3851M_CAM_4", 0, -1, out hv_AcqHandle);
            HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureTime", 3500.0);
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            ho_Image.Dispose();
            HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);

            try
            {
                //Image Processing:

                //Find the edge conture
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                ho_ROI_0.Dispose();
                HOperatorSet.GenRectangle1(out ho_ROI_0, 1240, 25, 1650, 3750);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_Image, ho_ROI_0, out ho_ImageReduced);

                //No. 1 - dia 1
                ho_Regions.Dispose();
                HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions, 0, 60);
                ho_RegionFillUp1.Dispose();
                HOperatorSet.FillUp(ho_Regions, out ho_RegionFillUp1);

                ho_Connection.Dispose();
                HOperatorSet.Connection(ho_Regions, out ho_Connection);

                //No. 1 - dia 1
                ho_SelectedRegions1.Dispose();
                HOperatorSet.SelectShape(ho_Connection, out ho_SelectedRegions1, "area",
                    "and", 300000, 800000);

                HOperatorSet.CountObj(ho_SelectedRegions1, out hv_SelectNumber);
                ho_Contours.Dispose();
                HOperatorSet.GenContourRegionXld(ho_SelectedRegions1, out ho_Contours, "border");

                //Smoth edge conture
                ho_SmoothedContours.Dispose();
                HOperatorSet.SmoothContoursXld(ho_Contours, out ho_SmoothedContours, 29);
                HOperatorSet.GetContourXld(ho_SmoothedContours, out hv_Row, out hv_Col);

                //Define constants:
                hv_HalfH = hv_Height / 2;
                hv_HalfW = hv_Width / 2;

                //* Define max value from tuple
                HOperatorSet.TupleMax(hv_Row, out hv_TupleMax);
                HOperatorSet.TupleFindFirst(hv_Row, hv_TupleMax, out hv_IndexMax);
                hv_ColumMax = hv_Col.TupleSelect(hv_IndexMax);
                hv_rowToMax0 = hv_Row.TupleSelect(hv_IndexMax);
                hv_colToMax0 = hv_Col.TupleSelect(hv_IndexMax);
                hv_output = 1382 - (hv_Row.TupleSelect(hv_IndexMax));
                hv_outputmm = ((1382 - (hv_Row.TupleSelect(hv_IndexMax))) / 3) * 0.005;

            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                hv_MessageError = " ERROR: Not able to analize photo!";
                HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_MessageError, "window",
                    10, 10, "black", new HTuple(), new HTuple());
            }

            HOperatorSet.CloseFramegrabber(hv_AcqHandle);

        }
        catch (HalconException HDevExpDefaultException)
        {
            ho_Image.Dispose();
            ho_ROI_0.Dispose();
            ho_ImageReduced.Dispose();
            ho_Regions.Dispose();
            ho_RegionFillUp1.Dispose();
            ho_Connection.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_Contours.Dispose();
            ho_SmoothedContours.Dispose();

            throw HDevExpDefaultException;
        }
        ho_Image.Dispose();
        ho_ROI_0.Dispose();
        ho_ImageReduced.Dispose();
        ho_Regions.Dispose();
        ho_RegionFillUp1.Dispose();
        ho_Connection.Dispose();
        ho_SelectedRegions1.Dispose();
        ho_Contours.Dispose();
        ho_SmoothedContours.Dispose();

    }
    #endregion

#region ONE SHOT IMAGE PROCESSING S2
    private void action3()
    {


        // Local iconic variables 
        HObject ho_Image, ho_ROI_0 = null, ho_ImageReduced = null;
        HObject ho_Regions = null, ho_RegionFillUp1 = null, ho_Connection = null;
        HObject ho_SelectedRegions1 = null, ho_Contours = null, ho_SmoothedContours = null;

        // Local control variables 
        HTuple hv_AcqHandle = null, hv_Width = new HTuple();
        HTuple hv_Height = new HTuple(), hv_SelectNumber = new HTuple();
        HTuple hv_Row = new HTuple(), hv_Col = new HTuple(), hv_HalfH = new HTuple();
        HTuple hv_HalfW = new HTuple(), hv_TupleMin = new HTuple();
        HTuple hv_IndexMin = new HTuple(), hv_ColumMin = new HTuple();
        HTuple hv_rowToMin0 = new HTuple(), hv_colToMin0 = new HTuple();
        // HTuple hv_output = new HTuple(),
        //public float hv_fOutput = 0.0f;
        HTuple hv_outputmm = new HTuple();
        HTuple hv_Exception = null, hv_MessageError = new HTuple();

        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);
        HOperatorSet.GenEmptyObj(out ho_ROI_0);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_RegionFillUp1);
        HOperatorSet.GenEmptyObj(out ho_Connection);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_Contours);
        HOperatorSet.GenEmptyObj(out ho_SmoothedContours);

        try
        {
            //************************************************************
            //ONE SHOT APP
            //************************************************************

            //Image Acquisition:

            HOperatorSet.OpenFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default",
                -1, "default", -1, "false", "default", "GC3851M_CAM_4", 0, -1, out hv_AcqHandle);
            // HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureTime", 2000.0);
            HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "ExposureTime", 3500.0);
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            ho_Image.Dispose();
            HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);

            try
            {
                //Image Processing:

                //Find the edge conture
                //dev_display (Image)
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                ho_ROI_0.Dispose();
                HOperatorSet.GenRectangle1(out ho_ROI_0, 1240, 25, 1650, 3750);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_Image, ho_ROI_0, out ho_ImageReduced);

                //No. 1 - dia 1
                ho_Regions.Dispose();
                HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions, 0, 60);
                ho_RegionFillUp1.Dispose();
                HOperatorSet.FillUp(ho_Regions, out ho_RegionFillUp1);

                ho_Connection.Dispose();
                HOperatorSet.Connection(ho_Regions, out ho_Connection);

                //No. 1 - dia 1
                ho_SelectedRegions1.Dispose();
                HOperatorSet.SelectShape(ho_Connection, out ho_SelectedRegions1, "area",
                    "and", 300000, 800000);

                HOperatorSet.CountObj(ho_SelectedRegions1, out hv_SelectNumber);
                ho_Contours.Dispose();
                HOperatorSet.GenContourRegionXld(ho_SelectedRegions1, out ho_Contours, "border");

                //Smoth edge conture
                ho_SmoothedContours.Dispose();
                HOperatorSet.SmoothContoursXld(ho_Contours, out ho_SmoothedContours, 29);
                HOperatorSet.GetContourXld(ho_SmoothedContours, out hv_Row, out hv_Col);

                //Define constants:
                hv_HalfH = hv_Height / 2;
                hv_HalfW = hv_Width / 2;

                //* Define min value from tuple
                HOperatorSet.TupleMin(hv_Row, out hv_TupleMin);
                HOperatorSet.TupleFindFirst(hv_Row, hv_TupleMin, out hv_IndexMin);
                hv_ColumMin = hv_Col.TupleSelect(hv_IndexMin);
                hv_rowToMin0 = hv_Row.TupleSelect(hv_IndexMin);
                hv_colToMin0 = hv_Col.TupleSelect(hv_IndexMin);
                hv_output = 1382 - (hv_Row.TupleSelect(hv_IndexMin));
                hv_outputmm = ((1382 - (hv_Row.TupleSelect(hv_IndexMin))) / 3) * 0.005;

            }

            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                hv_MessageError = " ERROR: Not able to analize photo!";

            }

            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
            

        }

        catch (HalconException HDevExpDefaultException)
        {
            ho_Image.Dispose();
            ho_ROI_0.Dispose();
            ho_ImageReduced.Dispose();
            ho_Regions.Dispose();
            ho_RegionFillUp1.Dispose();
            ho_Connection.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_Contours.Dispose();
            ho_SmoothedContours.Dispose();

            throw HDevExpDefaultException;
        }

        ho_Image.Dispose();
        ho_ROI_0.Dispose();
        ho_ImageReduced.Dispose();
        ho_Regions.Dispose();
        ho_RegionFillUp1.Dispose();
        ho_Connection.Dispose();
        ho_SelectedRegions1.Dispose();
        ho_Contours.Dispose();
        ho_SmoothedContours.Dispose();
        
    }
    #endregion


    public void InitHalcon()
    {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    }
#region VALUES TO PLC

    // Result for PLC LIVE
    public void RunHalcon(HTuple Window)
    {
    hv_ExpDefaultWinHandle = Window;
    action1();
    argumenti.PXvalue = (float)hv_output.D;
    // Chech for infinity Double to float conversion
        if (float.IsPositiveInfinity(argumenti.PXvalue))
        {
            argumenti.PXvalue = float.MaxValue;
        }
        else if (float.IsNegativeInfinity(argumenti.PXvalue))
        {
            argumenti.PXvalue = float.MinValue;
        }
        if (UpdateResult != null)
            UpdateResult(this, argumenti);
        }

    // Result for PLC S1
    public void RunHalconS1()
    {
        action2();
        argumenti.PXvalue = (float)hv_output.D;
        // Chech for infinity Double to float conversion
        if (float.IsPositiveInfinity(argumenti.PXvalue))
        {
            argumenti.PXvalue = float.MaxValue;
        }
        else if (float.IsNegativeInfinity(argumenti.PXvalue))
        {
            argumenti.PXvalue = float.MinValue;
        }
        if (UpdateResult != null)
            UpdateResult(this, argumenti);
    }

    // Result for PLC S2
    public void RunHalconS2()
    {
        action3();
        argumenti.PXvalue = (float)hv_output.D;
    // Chech for infinity Double to float conversion
        if (float.IsPositiveInfinity(argumenti.PXvalue))
        {
            argumenti.PXvalue = float.MaxValue;
        }
        else if (float.IsNegativeInfinity(argumenti.PXvalue))
        {
            argumenti.PXvalue = float.MinValue;
        }
        if (UpdateResult != null)
            UpdateResult(this, argumenti);
        
    }
#endregion
}

